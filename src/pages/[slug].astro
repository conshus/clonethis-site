---
import Layout from '../layouts/Layout.astro';
import { getEntry } from 'astro:content';
import { marked } from 'marked';
const { slug } = Astro.params;
console.log("slug: ", slug);
const starter = await getEntry('starter', slug);
console.log("starter: ", starter);
if(!starter){
  return Astro.redirect('./');
}
const { Content, headings } = await starter.render();
console.log("headings: ", headings);
let instructions;
if(starter.data.instructions){
  console.log("got instructions: ", starter.data.instructions);
  const response = await fetch(starter.data.instructions);
  const markdown = await response.text();
  instructions = marked.parse(markdown);
}
---
<Layout title={starter.data.name}>
  <!-- <h1>{starter.data.name}</h1>
  <h2>{slug}</h2> -->
  <div id="container">
    <fieldset>
      <legend><mark>Summary</mark></legend>
      <span set:html={starter.data.summary}></span>
    </fieldset>

    {starter.data.isComingSoon && <h2>Soon Come.</h2>}


    
    <!-- <Content />
    <b>test</b> -->

    <fieldset>
      <legend><mark>Status</mark></legend>
      <ul set:html={starter.data.status}></ul>
    </fieldset>


    <!-- <div id="updates-container"> -->
    <!-- <button id="updates-button">Get updates.</button> -->
    <!-- </div> -->

    <details>
      <summary><mark>Updates</mark></summary>
      Get updates in the <a href={starter.data.updates} target="_blank">GitHub Discussions</a>.
    </details>

    {starter.data.instructions && !starter.data.isComingSoon && <a href="#instructions" id="instructions-link">show instructions</a>}

      
  </div>

  <dialog id="instructions-dialog">
    <form method="dialog">
      <button id="close">X</button>
    </form>
    {starter.data.instructions && <div set:html={instructions}></div>}
  </dialog>
    
</Layout>

<script is:inline  data-astro-rerun>
  
  document.addEventListener('astro:page-load', () => {
    // This only runs once.
    // setupStuff();
    console.log("check for hashtag");
    console.log("location.hash: ",window.location.hash);

    if (document.querySelector("#instructions-link")){
      const instructionsLinkEl = document.querySelector("#instructions-link");
      const instructionsDialog = document.querySelector("#instructions-dialog");

      if(window.location.hash.includes("instructions")){
        instructionsDialog.showModal();
      }

      instructionsLinkEl.addEventListener("click", () => instructionsDialog.showModal());

    }

	}, { once: true });

</script>

<style>

  #container {
    margin-top: 20px;
  }
  fieldset {
    max-width: 475px;
    /* width: 100%; */
    margin: auto;
  }
  fieldset > legend > mark {
    font-weight: 700;
  }
  h2 {
    text-align: center;
  }
  #updates-button {
    display: block;
    margin: auto;
    font-size: clamp(.5rem, calc(.5rem + 5vw), 1.5rem);
    padding: 10px;
    margin-top: 35px;
  }

  details {
    max-width: 475px;
    margin: auto;
    margin-top: 20px;
  }

  summary {
    font-weight: 700;
    margin-bottom: 10px;
  }

</style>