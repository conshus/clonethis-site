---
import { ViewTransitions } from 'astro:transitions';
import { getCollection, getEntry } from 'astro:content';
import Dwane from '../components/Dwane.astro';

interface Props {
	title: string;
}

let slug = Astro.params.slug;
console.log("slug layout: ", slug);

console.log("Astro.url: ", Astro.url);
if (Astro.url.pathname.includes('shop')){
	slug = "shop";
}

console.log("slug again: ", slug);
const { title } = Astro.props;


const allStarters = await getCollection('starter');
// console.log("allStarters: ", allStarters);

---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ViewTransitions />
	</head>
	<body>
		<section>
			<header>
				<div style="text-align: right">
					{slug && <a href="./">home</a>} {slug && slug !== "shop" && "|"} {slug !== "shop" && <a href="./shop">shop</a>}
				</div>
				<div style="text-align: center">
					<label for="starter-select" style="font-size: 6rem">Clone this:</label>
					<br/>
					<select name="pages" id="starter-select">
						<option value="">select a starter</option>
						{allStarters.map(starterEntry => (
							<option value=`/${starterEntry.slug}` selected={starterEntry.slug === slug} >{starterEntry.data.name}</option>
						))}
					</select>
	
				</div>
					
			</header>
			<aside id="empty-space"></aside>
			<main>
				<slot />
			</main>
			<aside id="dwane-container">
				<Dwane mode=`${slug ? slug : "main"}` />
			</aside>
	
		</section>
	</body>
</html>

<script>
	import { navigate } from 'astro:transitions/client';
	window.astroNavigate = navigate;
</script>

<script is:inline data-astro-rerun>
	console.log("location.hash: ",window.location.hash);

	document.addEventListener('astro:page-load', () => {
    // This only runs once.
    // setupStuff();
		console.log("astro:page-load");
			const selectEl = document.querySelector("#starter-select");
			console.log("selectEl: ", selectEl);
			selectEl.addEventListener("change", (e)=> {
				console.log("selectEl.value: ", selectEl.value);
				// location.href= selectEl.value;
				window.astroNavigate(selectEl.value);
			});

	}, { once: true });


</script>



<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
		--header-height: 100px;
	}
	html {
		font-family: system-ui, sans-serif;
		background: #13151a;
		background-size: 224px;
		color: white;
	}

	body {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	a {
		color: white;
	}

	select {
		font-size: 1.9rem;
		padding: 2px 5px;
		text-align: center;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
	section {
		display: grid;
		width: 100%;
		height: 100dvh;
		max-width: 1500px;
		grid-template-areas:
			"header header header"
			"empty main dwane";
		grid-template-columns: 200px 1fr 200px;
		grid-template-rows: 200px 1fr;
		margin: auto;
	}

	@media (max-width: 968px) {
		section {
			grid-template-areas:
				"header header"
				"main dwane";

		}
	}

	@media (max-width: 680px) {
		section {
			grid-template-areas:
				"header"
				"main";

		}
	}


	header {
		grid-area: header;
	}

	#empty-space {
		grid-area: empty;
	}

	#dwane-container {
		grid-area: dwane;
		position: relative;
	}

	main {
		grid-area: main;
	}
</style>
